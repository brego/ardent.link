@function rgba2hex($rgba-color, $background) {
    $percent:     alpha($rgba-color) * 100%;
    $opaque:      opacify($rgba-color, 1);
    $solid-color: mix($opaque, $background, $percent);
    @return $solid-color;
};

// Author: John W. Long
// http://thesassway.com/intermediate/mixins-for-semi-transparent-colors
@mixin rgba-color-fallback($attribute, $color, $background) {
    #{$attribute}: rgba2hex($color, $background);
    #{$attribute}: $color;
};

@mixin background-color($color, $background) {
    @include rgba-color-fallback(background-color, $color, $background);
};

@mixin font-color($color, $background) {
    @include rgba-color-fallback(color, $color, $background);
};

@function imgurl($file) {
    @return url("../images/#{$file}");
}

@function cloudy($pct) {
    @return rgba(#fff, $pct);
}

@function murky($pct) {
    @return rgba(#000, $pct);
}

@mixin opacity($opacity) {
    opacity: $opacity;
    $opacity-ie: $opacity * 100;
    // scss-lint:disable SpaceAroundOperator
    filter: alpha(opacity=$opacity-ie); //IE8
    // scss-lint:enable SpaceAroundOperator
}

@mixin responsive-background($file, $extension:jpg) {
    @include media('<=800px') {
        background-image: imgurl("#{$file}-800.#{$extension}");
    }

    @include media('>800px') {
        background-image: imgurl("#{$file}-1440.#{$extension}");
    }

    @include media('>1440px') {
        background-image: imgurl("#{$file}.#{$extension}");
    }

    @include media('<=800px', 'retina2x') {
        background-image: imgurl("#{$file}-1440.#{$extension}");
    }

    @include media('>800px', 'retina2x') {
        background-image: imgurl("#{$file}.#{$extension}");
    }
}

//  Helper function to replace characters in a string
@function str-replace($string, $search, $replace: '') {
    $index: str-index($string, $search);
    @return if($index,
        str-slice($string, 1, $index - 1) + $replace +
        str-replace(str-slice($string, $index +
        str-length($search)), $search, $replace),
        $string);
}

//  Function to create an optimized svg url
@function svg-url($svg) {
    //
    // Add missing namespace
    //
    @if not str-index($svg, xmlns) {
        $svg: str-replace($svg, '<svg', '<svg xmlns="http://www.w3.org/2000/svg"');
    }
    //
    // Chunk up string in order to avoid
    // "stack level too deep" error
    //
    $encoded: '';
    $slice:   2000;
    $index:   0;
    $loops:   ceil(str-length($svg) / $slice);

    @for $i from 1 through $loops {
        $chunk: str-slice($svg, $index, $index + $slice - 1);
        //
        // Encode
        //
        $chunk: str-replace($chunk, '"', "'");
        $chunk: str-replace($chunk, '%', '%25');
        $chunk: str-replace($chunk, '&', '%26');
        $chunk: str-replace($chunk, '#', '%23');
        $chunk: str-replace($chunk, '{', '%7B');
        $chunk: str-replace($chunk, '}', '%7D');
        $chunk: str-replace($chunk, '<', '%3C');
        $chunk: str-replace($chunk, '>', '%3E');

        //
        // The maybe list
        //
        // Keep size and compile time down
        // ... only add on documented fail
        //
        // $chunk: str-replace($chunk, '|', '%7C');
        // $chunk: str-replace($chunk, '[', '%5B');
        // $chunk: str-replace($chunk, ']', '%5D');
        // $chunk: str-replace($chunk, '^', '%5E');
        // $chunk: str-replace($chunk, '`', '%60');
        // $chunk: str-replace($chunk, ';', '%3B');
        // $chunk: str-replace($chunk, '?', '%3F');
        // $chunk: str-replace($chunk, ':', '%3A');
        // $chunk: str-replace($chunk, '@', '%40');
        // $chunk: str-replace($chunk, '=', '%3D');
        //

        $encoded: #{$encoded}#{$chunk};
        $index: $index + $slice;
    }
    @return url("data:image/svg+xml,#{$encoded}");
}

//  Background svg mixin
@mixin background-svg($svg) {
    background-image: svg-url($svg);
}
